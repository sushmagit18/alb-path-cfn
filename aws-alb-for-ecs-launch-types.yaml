AWSTemplateFormatVersion: "2010-09-09"
Description: VPC Infrastructure with Public Subnets for an ECS Cluster
Parameters:
  EnvironmentName:
    Type: String
    Default: aws-alb-for-ecs-launch-types
    Description: "Orchestrating Amazon ECS Launch Types by AWS ALB Path-Based Routing"
  # KeyName:
  #   Type: AWS::EC2::KeyPair::KeyName
  #   Default: ecs-ec2-ssh
  #   Description: EC2 KeyPair in case you need to enable SSH access to the ECS instances.
  InstanceType:
    # Description: EC2 instance type
    Type: String
    Default: t3.small
    Description: Choose the EC2 instance type 
    AllowedValues: [ t3.micro, t3.small, t3.medium, t3.large, t2.xlarge, 
     t2.2xlarge,m5.large, m5.xlarge, c5.large, c5.xlarge ] 
    ConstraintDescription: Choose the EC2 instance type
  DesiredCapacity:
    Type: Number
    Default: '1'
    Description: Desired number of EC2 instances in your ECS cluster.
  MaxSize:
    Type: Number
    Default: '6'
    Description: Maximum number of EC2 instances in your ECS cluster.
  ECSAMI:
    # Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2/recommended/image_id
    Description: AMI ID for EC2 instance, default value is the latest AMI


Mappings:
  CIDR:
    VPC-CIDR:
      CIDR: "172.16.0.0/16"
    PublicSubnet1-CIDR:
      CIDR: "172.16.0.0/24"
    PublicSubnet2-CIDR:
      CIDR: "172.16.1.0/24"
    PublicSubnet3-CIDR:
      CIDR: "172.16.2.0/24"

Resources:
  ## VPC Infrastructure
  ECSDemoVPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap ["CIDR", "VPC-CIDR", "CIDR"]
      Tags:
        - Key: "Name"
          Value: "ECSDemoVPC"
  ## Two Public Subnets
  ECSDemoPublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: { Ref: "AWS::Region" }
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicSubnetOne"
      VpcId: !Ref "ECSDemoVPC"
      CidrBlock: !FindInMap ["CIDR", "PublicSubnet1-CIDR", "CIDR"]
      MapPublicIpOnLaunch: true
  ECSDemoPublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: { Ref: "AWS::Region" }
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicSubnetTwo"
      VpcId: !Ref "ECSDemoVPC"
      CidrBlock: !FindInMap ["CIDR", "PublicSubnet2-CIDR", "CIDR"]
      MapPublicIpOnLaunch: true
  ## IGW and Route Tables
  ECSDemoInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: "Name"
          Value: "ECSDemoInternetGateway"
  ECSDemoGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref "ECSDemoVPC"
      InternetGatewayId: !Ref "ECSDemoInternetGateway"
  ECSDemoPublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref "ECSDemoVPC"
      Tags:
        - Key: "Name"
          Value: "ECSDemoPublicRouteTable"
  ECSDemoPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: ECSDemoGatewayAttachment
    Properties:
      RouteTableId: !Ref "ECSDemoPublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "ECSDemoInternetGateway"
  ECSDemoPublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSDemoPublicSubnetOne
      RouteTableId: !Ref ECSDemoPublicRouteTable
  ECSDemoPublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ECSDemoPublicSubnetTwo
      RouteTableId: !Ref ECSDemoPublicRouteTable

  ## IAM ROLES
  ECSEC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchGetImage"
                  - "ecr:GetDownloadUrlForLayer"
                Resource: "*"
      RoleName: "ECS-EC2-Role"  
      Tags:
        - Key: "Name"
          Value: "ECS-EC2-Role"
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # allow ECS to use ENIs
                  - "ec2:AttachNetworkInterface"
                  - "ec2:CreateNetworkInterface"
                  - "ec2:CreateNetworkInterfacePermission"
                  - "ec2:DeleteNetworkInterface"
                  - "ec2:DeleteNetworkInterfacePermission"
                  - "ec2:Describe*"
                  - "ec2:DetachNetworkInterface"
                  # allow ECS to use ALB
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                Resource: "*"
      RoleName: "ECS-Service-Role"      
      Tags:
        - Key: "Name"
          Value: "ECS-Service-Role"
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  # allow ECS Tasks to download images from ECR
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  # allow ECS tasks to upload logs to CloudWatch
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
      RoleName: "ECSTaskExecutionRole"    
      Tags:
        - Key: "Name"
          Value: "ECSTaskExecutionRole"
  ## an ECS Cluster, which will support both EC2 and EC2 Launch types
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub ${EnvironmentName}
  
  ## Security Group for HTTP Access
  ECSSecurityGroupWeb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP on port 80
      GroupName: "ECS-DEMO-Web-SG"
      VpcId: 
        !Ref ECSDemoVPC
      SecurityGroupIngress: 
        - IpProtocol: tcp
          CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
      Tags:
        - Key: "Name"
          Value: "ECS-DEMO-Web-SG"

  ## Security Group for ALB to container access
  ECSSecurityGroupInt:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow access from application load balancer
      GroupName: "ECS-DEMO-Int-SG"
      VpcId:
        !Ref ECSDemoVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref "ECSSecurityGroupWeb"
      Tags:
        - Key: "Name"
          Value: "ECS-DEMO-Int-SG"
  ## Autoscaling group to launch EC2 instances that will register themselves to cluster
  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: [ECSDemoVPC, ECSDemoPublicSubnetOne, ECSDemoPublicSubnetTwo, ECSInstanceLaunchTemplate]
    Properties:
      VPCZoneIdentifier:
        - !Ref ECSDemoPublicSubnetOne
        - !Ref ECSDemoPublicSubnetTwo
      # LaunchConfigurationName: !Ref 'ECSInstancesLaunchConfig'
      LaunchTemplate:
        LaunchTemplateId: !Ref ECSInstanceLaunchTemplate
        Version: !GetAtt ECSInstanceLaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      NewInstancesProtectedFromScaleIn: 'false'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: 'true'

  ECSEC2CapacityProvider:
    Type: "AWS::ECS::CapacityProvider"
    Properties:
      AutoScalingGroupProvider:
        AutoScalingGroupArn: !Ref ECSAutoScalingGroup
        ManagedScaling:
          Status: ENABLED
          TargetCapacity: 100
        ManagedTerminationProtection: DISABLED
      Name: ec2-capacity-provider
  
  ClusterCPAssociation:
    Type: "AWS::ECS::ClusterCapacityProviderAssociations"
    Properties:
      Cluster: !Ref ECSCluster
      CapacityProviders:
        - !Ref ECSEC2CapacityProvider
      DefaultCapacityProviderStrategy:
        - CapacityProvider: !Ref ECSEC2CapacityProvider
          Base: 1
          Weight: 1 
  # ECSInstancesLaunchConfig:
  #   Type: AWS::AutoScaling::LaunchConfiguration
  #   Properties:
  #     ImageId: !Ref 'ECSAMI'
  #     SecurityGroups: [!Ref 'ECSSecurityGroupInt']
  #     InstanceType: !Ref 'InstanceType'
  #     # KeyName: !Ref 'KeyName'
  #     IamInstanceProfile: !Ref 'EC2InstanceProfile'
  #     UserData:
  #       Fn::Base64: !Sub |
  #         #!/bin/bash -xe
  #         echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
  #         yum install -y aws-cfn-bootstrap
  #         /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  ECSInstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: EC2LauchTemplate
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt
            - EC2InstanceProfile
            - Arn
        ImageId: !Ref 'ECSAMI'
        InstanceType: !Ref 'InstanceType'
        # KeyName: MyKeyPair
        SecurityGroupIds: 
          - !GetAtt ECSSecurityGroupInt.GroupId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y aws-cfn-bootstrap
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ 'ECS-EC2-Role' ]
    DependsOn: ECSEC2Role

  ## ApplicationLoadBalancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: alb-for-ecs-cluster
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref ECSDemoPublicSubnetOne
        - !Ref ECSDemoPublicSubnetTwo
      SecurityGroups: [!Ref "ECSSecurityGroupWeb"]        
  
  ## Target Group for EC2 Instances of ECS with EC2
  TargetGroupForECSEC2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroupForECSEC2
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref "ECSDemoVPC"

  ## Target Group for ENIs of ECS with Fargate
  TargetGroupForECSFargate:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: TargetGroupForECSFargate
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref "ECSDemoVPC"
   
  ## path parameter for ec2 
  ListenerRule1:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TargetGroupForECSEC2"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /ec2/*
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 1
  
  ## path parameter for fargate
  ListenerRule2:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TargetGroupForECSFargate"
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - /fargate/*
      ListenerArn: !Ref ApplicationLoadBalancerListener
      Priority: 2

  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "#{protocol}"
            Port: "#{port}"
            Host: "#{host}"
            Path: "/ec2/"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref "ApplicationLoadBalancer"
      Port: 80
      Protocol: HTTP

Outputs:
  DefaultUrlofALB:
    Description: Default and Public URL of the Application Load Balancer
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}
    Export:
      Name: !Sub ${EnvironmentName}:ApplicationLoadBalancer

  UrlPathforEC2:
    Description: Target for default URL and any path that ends with /ec2/*
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/ec2/*
    Export:
      Name: !Sub ${EnvironmentName}:TargetGroupForECSEC2

  UrlPathforFargate:
    Description: Target for any path that ends with /fargate/*
    Value: !Sub http://${ApplicationLoadBalancer.DNSName}/fargate/*
    Export:
      Name: !Sub ${EnvironmentName}:TargetGroupForECSFargate